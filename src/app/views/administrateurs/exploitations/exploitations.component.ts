import { CommonModule } from '@angular/common';
import { Component, OnInit, TemplateRef } from '@angular/core';
import { FormGroup, FormsModule } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { AlertModule, ToastBodyComponent, ToastComponent, ToastHeaderComponent, ToasterComponent } from '@coreui/angular';
import { ModalDismissReasons, NgbDropdownModule, NgbModal, NgbModalConfig, NgbNavModule } from '@ng-bootstrap/ng-bootstrap';
import { BsDatepickerModule } from 'ngx-bootstrap/datepicker';
import { Adress, Adresse } from 'src/app/shared/model/adresse';
import { Centrerevenu, Centrerevenus } from 'src/app/shared/model/centrerevenu';
import { Exploitation } from 'src/app/shared/model/exploitations';
import { InterfaceCentreRevenu } from 'src/app/shared/model/interface-centrerevenu';
import { InterfaceExploitations, InterfaceExploitationss } from 'src/app/shared/model/interface-exploitations';
import { InterfaceLieustockages } from 'src/app/shared/model/interface-lieustockages';
import { CentreRevenuService } from 'src/app/shared/service/centre-revenu.service';
import { ExploitationService } from 'src/app/shared/service/exploitation.service';
import { FournisseurService } from 'src/app/shared/service/fournisseur.service';
import { PAYS } from 'src/assets/pays';

@Component({
  selector: 'app-exploitations',
  standalone: true,
  imports: [CommonModule, FormsModule, BsDatepickerModule,NgbNavModule,NgbDropdownModule,AlertModule,ToasterComponent,ToastComponent,ToastHeaderComponent,ToastBodyComponent],
  templateUrl: './exploitations.component.html',
  styleUrl: './exploitations.component.scss'
})
export class ExploitationsComponent implements OnInit {

  public adresse: Adress;
  public adresses: Adresse;
  public centre: InterfaceCentreRevenu;
  public centres: InterfaceCentreRevenu[];
  public exploitation: InterfaceExploitations;
  public exploitations: InterfaceExploitations[];
  public lieuSTockage: InterfaceLieustockages;
  public lieuSTockages :InterfaceLieustockages[];

  public exploitationForm = FormGroup;
  public centreForm = FormGroup;
  
  closeResult = '';
  public bsConfig: { containerClass: string; locale: string; dateInputFormat: string; };
  private isAdmin = sessionStorage.getItem('admin') === '0' ? false : true;

  public toggle = true;
  public modifToggle = true;
  public inputModif = false;
  public addCentre = false;

  public country = PAYS;
  public flags: string = '';

  public exploitationId =0;

  position = 'top-end';
  visible = false;
  percentage = 0;
  public message = '';
  public color = 'success';
  public textcolor = 'text-light';

  toggleToast(_message: string) {
    this.message = _message;
    this.visible = !this.visible;
  }

  onVisibleChange($event: boolean) {
    this.visible = $event;
    this.percentage = !this.visible ? 0 : this.percentage;
  }

  onTimerChange($event: number) {
    this.percentage = $event * 25;
  }

  constructor(
    public router: Router,
    public route: ActivatedRoute,
    private exploitationService: ExploitationService,
    private centreService: CentreRevenuService,
    private fournisseurService: FournisseurService,
    private modalService: NgbModal,
    config: NgbModalConfig,
  ) {
    this.bsConfig = Object.assign({}, { containerClass: 'theme-blue', locale: 'fr', dateInputFormat: 'DD/MM/YYYY' });
    config.backdrop = 'static';
    config.keyboard = false;
    this.resetExploitation();
    this.resetCentre();
  }

  ngOnInit(): void {
    this.showAllExploitation();
    this.getAllCentreRevenu();
  }

  public showAllExploitation(){
    this.exploitationService.getExploitation().subscribe({
      next: async (_exploitations) => {
        // console.log(_exploitations)
        for (const _exploitation of _exploitations) {
          if (_exploitation.adresses === null) {
            _exploitation.adresses = {
              rue: '...',
              ville: '...',
              code_postal: '...',
              pays: '...',
              selected: false,
              centreRevenu: [],
              exploitation: [],
              operateur: [],
            }
          }
        }
        this.exploitations = _exploitations;
        for (const exploitation of _exploitations) {
          if (exploitation.adresses === null) {
            exploitation.adresses = {
              rue: '...',
              ville: '...',
              code_postal: '...',
              pays: '...',
              selected: false,
              centreRevenu: [],
              exploitation: [],
              operateur: [],
            }
          }
        }
        this.exploitations = _exploitations;
      }
    })
  }

  public resetExploitation() {
    this.adresse = {
      rue: '',
      ville: '',
      code_postal: null,
      pays: '',
      selected: false,
      centreRevenu: [],
      exploitation: [],
      operateur: [],
    }
    this.exploitation = {
      code_couleur: "...",
      libelle: "...",
      nbDecimal: 0,
      commentaire:"...",
      siteWeb:"...",
      codenaf:"...",
      siret:"...",
      logo:"...",
      actif:true,
      adressesId:0,
      adresses: new Adress(),
      selected:false,
      centreRevenu:[]
    }
  }

  public resetCentre() {
    this.adresse = {
      rue: '...',
      ville: '...',
      code_postal: '...',
      pays: '...',
      selected: false,
      centreRevenu: [],
      exploitation: [],
      operateur: []
    }
    this.centre = {
      code: '',
      libelle: '',
      exploitationsId: 0,
      adressesId:0,
      email: '',
      telephone: '',
      exploitations: new Exploitation(),
      adresses: new Adress(),
      lieuStockage:[],
    }
  }
  getAllCentreRevenu(){
    this.centreService.getAllCentreRevenuWithoutLinks().subscribe({
      next:(_centres) =>{
        this.centres = _centres;
        console.log( this.centres);
        
        this.exploitation = {
          code_couleur: "...",
          libelle:"...",
          nbDecimal: 0,
          commentaire:"...",
          siteWeb:"...",
          codenaf:"...",
          siret:"...",
          logo:"...",
          actif:true,
          adressesId:this.adresse.id? this.adresse.id:0,
          adresses: this.adresse,
          selected:false,
          centreRevenu:_centres
        }
      },
    });
  } 

  toggleModal(){
    if (this.isAdmin) {
      this.toggle = !this.toggle;
      this.modifToggle = !this.modifToggle;
      this.resetExploitation();
      this.getAllCentreRevenu();
      this.fournisseurService.getAllAdresse().subscribe({
        next :(adresses) => {
          this.adresses = adresses;
          this.adresse = adresses[0];
        },
      })
    }
  }

  changeAdress(content: TemplateRef<any>) {
    if (this.modifToggle === false) {
      this.fournisseurService.getAllAdresse().subscribe({
        next: (adresses) => {
          for (const adresse of adresses) {
            if (this.exploitation.adresses ) {
              if (adresse.id == this.exploitation.adresses.id) {
                adresse.selected = true;
              } else {
                adresse.selected = false;
              }
            }
            if (this.centre.adresses) {
              if (adresse.id == this.centre.adresses.id) {
                adresse.selected = true;
              } else {
                adresse.selected = false;
              }
            }
          }
          this.adresses = adresses;
          this.modalService.open(content, { size: 'xl', ariaLabelledBy: 'modal-basic-title', backdropClass: 'light-dark-backdrop', centered: true }).result.then(
            (result) => {
              this.closeResult = `Closed with: ${result}`;
              console.log(this.closeResult)
              if (this.closeResult == 'Closed with: Save click') {
                if (this.adresse) {
                  if (this.addCentre === false ) {
                    this.exploitation.adresses = this.adresse;
                    this.exploitation.adressesId = this.adresse.id ? this.adresse.id : 0;
                  } else {
                    this.centre.adresses = this.adresse;
                    this.centre.adressesId = this.adresse.id ? this.adresse.id : 0;
                  }
                }
              }
            },
            (reason) => {
              this.closeResult = `Dismissed ${this.getDismissReason(reason)}`;
              console.log(this.closeResult)
            },
          );
        }
      })
    }
  }

  addFormCentre(){
    this.resetCentre();
    this.addCentre = (this.addCentre === false ? true:false);
  }

  selectAdress(data: Adress){
    this.adresse = data;
    this.adresse.id = data.id;
  }

  modifyExploitation(){
    this.inputModif =!this.inputModif;
    this.modifToggle = !this.modifToggle;
  }


  private getDismissReason(reason: any): string {
    switch (reason) {
      case ModalDismissReasons.ESC:
        return 'by pressing ESC';
      case ModalDismissReasons.BACKDROP_CLICK:
        return 'by clicking on a backdrop';
      default:
        return `with: ${reason}`;
    }
  }

  updateSelect(data: Adress) {
    this.adresse = data;
  }

  cancel() {
    this.modifToggle = true;
    this.toggle = !this.toggle;
    this.resetExploitation();
    this.exploitations = this.exploitations;
     this.addCentre = false;
    this.showAllExploitation();
  }

  submit(){
    if (this.isAdmin) {
      this.exploitationId = this.exploitation.id ? this.exploitation.id :0;
      if (this.exploitationId == 0) {
        this.exploitation.centreRevenu = this.centres.filter((line:any) => line.selected);
        this.centres = this.exploitation.centreRevenu;
        if (this.exploitation.centreRevenu.length >0 ) {
          this.exploitationService.createExploitation(this.exploitation,this.centres).subscribe({
            next: (value) =>{
              this.toggleToast('Nouveau exploitation crée avec succès !');
              this.inputModif = !this.inputModif;
              this.modifToggle = true;
            },
          });
        }else{
          alert('Veuiller sélectionner au moins un centre de revenu');
        }
      } else {
        this.exploitationService.updateExploitation(this.exploitation).subscribe({
          next: (value) =>{
            this.toggleToast('Cet exploitation a été modifié avec succès !');
            this.inputModif = !this.inputModif;
              this.modifToggle = true;
          },
        });
      }
    }
  }

  saveCentre(){
    this.lieuSTockages = this.centre.lieuStockage;
    this.centreService.createCentreRevenu(this.centre,this.lieuSTockages).subscribe({
      next:(value) =>{
        this.toggleToast('Nouveau centre de revenu crée avec succès !');
        this.addCentre = (this.addCentre === false ? true:false);
        this.getAllCentreRevenu();
      },
    })
  }

  showExploitation(exploitation:InterfaceExploitations){
    this.resetExploitation();
    this.exploitation = exploitation;
    this.centres = this.exploitation.centreRevenu;
    this.inputModif = !this.inputModif;
    this.toggle = !this.toggle;
    console.log(this.exploitation);
  }

  deleteExploitation(){
    if (this.isAdmin) {
      this.exploitationId = this.exploitation.id ? this.exploitation.id :0;
      if (this.exploitationId == 0) {
        alert('Cet exploitation ne peut pas supprimé');
      } else {
        this.centres = this.exploitation.centreRevenu;
        this.exploitationService.deleteExploitation(this.exploitation).subscribe({
          next:(value) =>{
            this.resetExploitation();
            this.toggleToast('Cet exploitation a été supprimé avec succès !');
            this.toggle = !this.toggle;
            this.showAllExploitation();
          },
        })
      }
    }
    
  }
}
